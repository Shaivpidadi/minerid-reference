const bsv = require('bsv')

const cb1 = Buffer.from('01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff1c03d3b6092f7376706f6f6c2e636f6d2f', 'hex')
const cb2 = Buffer.from('ffffffff021a0a5325000000001976a9145deb9155942e7d38febc15de8870222fd24d080e88ac0000000000000000fd1202006a04ac1eed884dc1017b2276657273696f6e223a22302e31222c22686569676874223a22363336363237222c22707265764d696e65724964223a22303262336335636535326539646139633334363663353865656438383566343839653430346138386135656262626538663738623533616232366333636338613834222c22707265764d696e65724964536967223a223330343430323230376438623462666661663639303566356362626635623836643534646531326366383761366162383066353766633636386365666232643536646530616330303032323033313366343266666361653333343334646163636330376433303036376664343034623563616663626261373266383765666632343736386561333136313731222c226d696e65724964223a22303262336335636535326539646139633334363663353865656438383566343839653430346138386135656262626538663738623533616232366333636338613834222c2276637478223a7b2274784964223a2230346563613165333964393830653964376630613961323365656430386263656134663766313931613864336233383262393137363864343531636637396633222c22766f7574223a307d7d4630440220750367f751921ca03a093a4a41bf8ee9849856d939d119af183ea9d6c65d0dd002200f84b981f48ec8365ce905e718bbe35e0ceb848933dd649f8b19121972878e7200000000', 'hex')

const padding = getPadding(cb1)

const cb = Buffer.concat([cb1, padding, cb2])

const tx = new bsv.Transaction(cb)

// Create modified coinbase tx
tx.inputs[0] = new bsv.Transaction.Input({
  prevTxId: '0000000000000000000000000000000000000000000000000000000000000000',
  outputIndex: 0xFFFFFFFF,
  script: new bsv.Script('0000000000000000')
})

tx.outputs.forEach((o, i) => {
  if (o.satoshis === 0 && o.script.toHex().match(/^(00){0,1}6a/)) { // find op return output
    tx.outputs[i] = new bsv.Transaction.Output({
      script: bsv.Script('006a'),
      satoshis: 0
    })
  }
})

console.log(tx.toString())

function getPadding (cb1) {
  const initial = 4 + 1 + 32 + 4

  if (cb1.length < initial) {
    throw new Error('Coinbase1 is too short')
  }

  cb1 = cb1.slice(initial)

  let size = cb1.readUInt8(0)
  cb1 = cb1.slice(1)
  switch (true) {
    case size < 0xfd:
      break
    case size === 0xfd:
      size = cb1.readUInt16LE(0)
      cb1 = cb1.slice(2)
      break
    case size === 0xfe:
      size = cb1.readUInt32LE(0)
      cb1 = cb1.slice(4)
      break
  }
  return Buffer.alloc(size - cb1.length)
}
